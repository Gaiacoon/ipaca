# Generated by Django 4.0.4 on 2022-08-04 16:40

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('paragraph', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction', models.CharField(choices=[('SC', 'single choice')], default=('SC', 'single choice'), max_length=100)),
                ('type', models.CharField(choices=[('R', 'Reading'), ('GS', 'Grammar/Style'), ('V', 'Vocabulary')], max_length=100)),
                ('title', models.CharField(max_length=255, unique=True)),
                ('paragraph_shown', models.BooleanField(default=False)),
                ('feedback', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Learner',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('learning_environment.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SingleChoice',
            fields=[
                ('task_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='learning_environment.task')),
                ('question', models.TextField()),
            ],
            bases=('learning_environment.task',),
        ),
        migrations.CreateModel(
            name='TaskOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField()),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learning_environment.lesson')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learning_environment.task')),
            ],
            options={
                'unique_together': {('task', 'lesson')},
            },
        ),
        migrations.CreateModel(
            name='TaskAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField()),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learning_environment.answer')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learning_environment.task')),
            ],
            options={
                'unique_together': {('task', 'answer')},
            },
        ),
        migrations.AddField(
            model_name='task',
            name='answers',
            field=models.ManyToManyField(through='learning_environment.TaskAnswer', to='learning_environment.answer'),
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('1', 'Textbook'), ('2', 'General texts'), ('3', 'Spezialized Texts')], max_length=100)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learning_environment.lesson')),
            ],
        ),
        migrations.AddField(
            model_name='lesson',
            name='tasks',
            field=models.ManyToManyField(through='learning_environment.TaskOrder', to='learning_environment.task'),
        ),
        migrations.CreateModel(
            name='Learner_Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('open', models.BooleanField(default=True)),
                ('correct', models.BooleanField(null=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learning_environment.task')),
                ('learner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learning_environment.learner')),
            ],
            options={
                'unique_together': {('learner', 'task')},
            },
        ),
        migrations.CreateModel(
            name='Learner_Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('open', models.BooleanField(default=True)),
                ('order', models.IntegerField()),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learning_environment.lesson')),
                ('learner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learning_environment.learner')),
            ],
            options={
                'unique_together': {('learner', 'lesson')},
            },
        ),
        migrations.AddField(
            model_name='learner',
            name='lessons',
            field=models.ManyToManyField(through='learning_environment.Learner_Lesson', to='learning_environment.lesson'),
        ),
        migrations.AddField(
            model_name='learner',
            name='tasks',
            field=models.ManyToManyField(through='learning_environment.Learner_Task', to='learning_environment.task'),
        ),
    ]
